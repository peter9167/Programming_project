구조체란?

- 구조체(structure type)란 사용자가 C언어의 기본 타입을 가지고 새롭게 정의할 수 있는 사용자 정의 타입이다.

- 구조체는 기본 타입만으로는 나타낼 수 없는 복잡한 데이터를 표현할 수 있다.

- 배열이 같은 타입의 변수 집합이라고 한다면, 구조체는 다양한 타입의 변수 집합을 하나의 타입으로 나타낸 것이다.

- 이때 구조체를 구성하는 변수를 구조체의 멤버(member) 또는 멤버 변수(member variable)라고 한다.




구조체의 정의와 선언
C언어에서 구조체는 struct 키워드를 사용하여 다음과 같이 정의한다.

문법
---

키워드 구조체 이름
 ↓      ↓
struct book

{
    char title[30]; // 멤버변수1의타입 멤버변수1의이름;

    char author[30]; // 멤버변수2의타입 멤버변수2의이름;
} my_book; ← 구조체 변수이름


- 정의된 book 구조체는 사용자 정의 자료형이라고 한다.
- 정의된 구조체 타입은 다음과 같이 구조체 변수로 선언하여 사용


예제1
----------------------------------
#include <stdio.h>
struct Human {
  int age;    /* 나이 */
  int height; /* 키 */
  int weight; /* 몸무게 */
};            /* ; 붙이는 것 주의하세요 */
int main() {
  struct Human Psi;	// Human 이라는 구조체의 구조체 변수 Psi 를 정의

  Psi.age = 99;
  Psi.height = 185;
  Psi.weight = 80;
  // 위 작업은 Psi 라는 구조체의 각 멤버에 값을 대입하는 것이다. 

  printf("Psi 에 대한 정보 \n");
  printf("나이   : %d \n", Psi.age);	// 결과 : 나이   : 99 
  printf("키     : %d \n", Psi.height);	// 결과 : 키     : 185 
  printf("몸무게 : %d \n", Psi.weight);	// 결과 : 몸무게 : 80 
  return 0;
}
----------------------------------




예제2
----
#include <stdio.h>

char copy_str(char *dest, const char *src);

struct Books {
  /* 책 이름 */
  char name[30];
  /* 저자 이름 */
  char auth[30];
  /* 출판사 이름 */
  char publ[30];
  /* 빌려 졌나요? */
  int borrowed;
};

int main() {
  struct Books Harry_Potter;

  copy_str(Harry_Potter.name, "Harry Potter");
  copy_str(Harry_Potter.auth, "J.K. Rolling");
  copy_str(Harry_Potter.publ, "Scholastic");	
  Harry_Potter.borrowed = 0;			// 도서 대출 여부 초기화 0

  printf("책 이름 : %s \n", Harry_Potter.name);	// 결과 : 책 이름 : Harry Potter 
  printf("저자 이름 : %s \n", Harry_Potter.auth);	// 결과 : 저자 이름 : J.K. Rolling 
  printf("출판사 이름 : %s \n", Harry_Potter.publ); // 결과 : 출판사 이름 : Scholastic 

  return 0;
}

char copy_str(char *dest, const char *src) {
  while (*src) {
    *dest = *src; // Harry_Potter 구조체 객체에 전달된 문자열 대입
    src++;
    dest++;
  }

  *dest = '\0';

  return 1;
}




구조체 배열

예제3
----
#include <stdio.h>

struct Books {
  /* 책 이름 */
  char name[30];
  /* 저자 이름 */
  char auth[30];
  /* 출판사 이름 */
  char publ[30];
  /* 빌려 졌나요? */
  int borrowed;
};

int main() {
  struct Books book_list[3];	// 크기가 3인 구조체 배열 생성
  int i;

  for (i = 0; i < 3; i++) { 	// 인덱스로 요소에 접근한 뒤 점으로 멤버에 접근
    printf("책 %d 정보 입력 : ", i);
    scanf("%s%s%s", book_list[i].name, book_list[i].auth, book_list[i].publ);
    book_list[i].borrowed = 0;
  }

  for (i = 0; i < 3; i++) {
    printf("------------------------------- \n");
    printf("책 %s 의 정보\n", book_list[i].name);
    printf("저자 : %s \n", book_list[i].auth);
    printf("출판사 : %s \n", book_list[i].publ);

    if (book_list[i].borrowed == 0) {
      printf("안 빌려짐\n");
    } else {
      printf("빌려짐 \n");
    }
  }
  return 0;
}



구조체 배열을 선언하는 동시에 초기화하기

- 구조체 배열을 선언하면서 초기화하려면 { } (중괄호)안에 중괄호를 사용합니다.
- struct 구조체이름 변수이름[크기] = { { .멤버이름1 = 값1, .멤버이름2 = 값2 },
                               { .멤버이름1 = 값3, .멤버이름2 = 값4 } };
- struct 구조체이름 변수이름[크기] = { { 값1, 값2 }, { 값3, 값4 } };


#include <stdio.h>

struct Point2D {
    int x;
    int y;
};

int main()
{
    // 구조체 배열을 선언하면서 초기화
    struct Point2D p1[3] = { { .x = 10, .y = 20 }, { .x = 30, .y = 40 }, { .x = 50, .y = 60 } };

    printf("%d %d\n", p1[0].x, p1[0].y);    // 10 20
    printf("%d %d\n", p1[1].x, p1[1].y);    // 30 40
    printf("%d %d\n", p1[2].x, p1[2].y);    // 50 60

    // 구조체 배열을 선언하면서 초기화
    struct Point2D p2[3] = { { 10, 20 }, { 30, 40 }, { 50, 60 } };

    printf("%d %d\n", p2[0].x, p2[0].y);    // 10 20
    printf("%d %d\n", p2[1].x, p2[1].y);    // 30 40
    printf("%d %d\n", p2[2].x, p2[2].y);    // 50 60

    return 0;
}






<typedef 로 struct 키워드 없이 구조체 선언하기>


- 구조체 변수를 선언할 때 일일이 struct 키워드를 붙이려니 귀찮다
- struct 키워드를 생략하려면 typedef로 구조체를 정의하면서 별칭(alias)을 지정해주면 된다.
-------------------------
typedef struct 구조체이름 {
    자료형 멤버이름;
} 구조체별칭;
-------------------------


예제1
----
#include <stdio.h>
#include <string.h>    // strcpy 함수가 선언된 헤더 파일

typedef struct _Person {   // 구조체 이름은 _Person
    char name[20];            // 구조체 멤버 1
    int age;                  // 구조체 멤버 2
    char address[100];        // 구조체 멤버 3
} Person;                  // typedef를 사용하여 구조체 별칭을 Person으로 정의

int main()
{
    Person p1;    // 구조체 별칭 Person으로 변수 선언

    // 점으로 구조체 멤버에 접근하여 값 할당
    strcpy(p1.name, "홍길동");
    p1.age = 30;
    strcpy(p1.address, "서울시 용산구 한남동");

    // 점으로 구조체 멤버에 접근하여 값 출력
    printf("이름: %s\n", p1.name);       // 이름: 홍길동
    printf("나이: %d\n", p1.age);        // 나이: 30
    printf("주소: %s\n", p1.address);    // 주소: 서울시 용산구 한남동

    return 0;
}



<익명 구조체 사용하기>

- typedef 구조체 별칭을 정의할 때 매번 구조체 이름을 지정해주려니 번거롭다.
- 익명 구조체(anonymous structure)를 사용하면 구조체 이름을 지정하지 않아도 된다.
- 즉, typedef로 구조체를 정의하면서 이름을 생략할 수 있다.

----------------
typedef struct {
    자료형 멤버이름;
} 구조체별칭;
----------------

- 변수는 구조체 별칭으로 선언하면 된다.
ex) 구조체별칭 변수이름;

예제1
----
#include <stdio.h>
#include <string.h>    // strcpy 함수가 선언된 헤더 파일

typedef struct {   // 구조체 이름이 없는 익명 구조체
    // typedef struct 뒤에 이름을 지정하지 않고 바로 { (여는 중괄호)를 시작하면 된다.
    // 단, 이때는 반드시 구조체 별칭을 지정해주어야 한다.
    char name[20];        // 구조체 멤버 1
    int age;              // 구조체 멤버 2
    char address[100];    // 구조체 멤버 3
} Person;          // typedef를 사용하여 구조체 별칭을 Person으로 정의

int main()
{
    Person p1;    // 구조체 별칭 Person으로 변수 선언

    // 점으로 구조체 멤버에 접근하여 값 할당
    strcpy(p1.name, "홍길동");
    p1.age = 30;
    strcpy(p1.address, "서울시 용산구 한남동");

    // 점으로 구조체 멤버에 접근하여 값 출력
    printf("이름: %s\n", p1.name);       // 이름: 홍길동
    printf("나이: %d\n", p1.age);        // 나이: 30
    printf("주소: %s\n", p1.address);    // 주소: 서울시 용산구 한남동

    return 0;
}

























