<바이너리(Binary)>

- 바이너리는 2진법을 의미하며, '1'과 '0'만을 사용하여 수를 나타내는 진법

- 컴퓨터에게 있어서 바이너리란 사실상 가장 근본이 되는 체계

- Binary Digits를 편하게 부르기 위해서 "bits"라는 용어 사용
  Windows를 설치할 때 "64비트 버전으로 깔아"라고 할 때 사용하는 비트와 동일한 용어

- 컴퓨터는 이러한 '1'과 '0'을 Voltage(전압)을 통하여 구분한다. 
  예를 들어서 '0'을 전달하고 싶을 때는 0V, '1'을 전달하고 싶을 때는 5V 방식으로 구성

- 상황에 따라서 Bit 패턴은 이미지, 알파벳, 숫자, 명령 그리고 무엇이든 의미


 




<컴파일러와 인터프리터>

- CPU가 수행해야 할 명령들을 프로그래밍 언어로 작성한 것을 소스 코드(Source Code)라고 한다.
  이를 컴퓨터가 이해할 수 있는 기계어의 형식으로 번역하는 것을 컴파일(Compile)이라고 한다.

- 컴파일을 해주는 소프트웨어는 컴파일러(Compiler) (대표적 GCC, Clang, MSVC 등)
  한번 컴파일되면 결과물이 프로그램으로 남기 때문에 언제든지 이를 실행하여 같은 명령을 처리 가능

- 그러나 모든 언어가 컴파일을 필요로 하는 것은 아니다.
  대표적으로 Python, Javascript 등의 언어는 컴파일을 필요하지 않다.
- 이 언어들은 사용자의 입력, 또는 사용자가 작성한 스크립트를 그때 그때 번역하여 CPU에 전달한다.
- 동작이 통역과 비슷하기 때문에 인터프리팅(Interpreting)이라고 불리며, 
  마찬가지로 이를 처리해주는 프로그램을 인터프리터(Interpreter)라고 한다.

-정리-
컴파일 : 컴파일은 아무 배경지식이 없는 사람이 책을 읽을 수 있도록 배경지식을 엮고, 
        번역하여 하나의 번역본을 만드는 과정
      - 결과물이 남아서 언제든 다시 읽어볼 수 있지만 한 번 번역하는데 시간이 많이 필요

인터프리팅 : 인터프리팅은 동시 통역사를 거쳐 대화하는 것으로 비유하여 이해할 수 있다.
      - 상대방과 빠르게 의사소통할 수 있지만, 같은 이야기를 하더라도 매번 통역사를 거쳐야 함

이 커리큘럼에서는 윈도우 PE 바이너리의 리버스 엔지니어링에 대해 다룰 것이다. 
그리고 이 코스에서는 관련된 배경 지식으로 C 소스 코드가 어떻게 바이너리로 컴파일되는지, 
개략적인 과정을 살펴본다. 윈도우 실행파일을 생성하려면 MSVC를 사용해야 하지만, 
여기서는 조금 더 자세한 설명을 위해 리눅스 환경에서 GCC를 사용한다.
해당 환경이 구축되지 않았어도 내용을 이해하는 데는 무리가 없을 것이다. 


C언어로 작성된 코드는 일반적으로 전처리(Preprocess), 컴파일(Compile), 어셈블(Assemble), 링크(Link)의 과정을 거쳐 바이너리로 번역된다.

아래의 예제 코드를 이용하여 각 단계에 대해 자세히 알아본다.
-----------------------------------------------
// Name: add.c
#include "add.h"
#define HI 3
int add(int a, int b) { return a + b + HI; }  // return a+b
-----------------------------------------------
// Name: add.h
int add(int a, int b);
-----------------------------------------------

컴파일 과정 속 컴파일: 
컴파일(Compile)의 정확한 의미는 어떤 언어로 작성된 소스 코드(Source Code)를 다른 언어의 목적 코드(Object Code)로 번역하는 것이다. 이런 맥락에서, 소스 코드를 어셈블리어로, 또는 소스 코드를 기계어로 번역하는 것 모두 컴파일이라고 볼 수 있다.






<전처리>

- 전처리는 컴파일러가 소스 코드를 어셈블리어로 컴파일하기 전에, 필요한 형식으로 가공하는 과정
- 언어마다 조금씩 다르지만, 컴파일 언어의 대부분은 다음의 전처리 과정을 거친다. 

1. 주석 제거
- 주석은 개발자가 자신과 개발자들의 코드 이해를 돕기위해 작성하는 메모이다. 
- 주석은 프로그램의 동작과 상관이 없으므로 전처리 단계에서 모두 제거된다.

2. 매크로 치환
- #define으로 정의한 매크로는 자주 쓰이는 코드나 상숫값을 단어로 정의한 것이다. 
- 전처리 과정에서 매크로의 이름은 값으로 치환된다.
메크로란/활용: http://www.tcpschool.com/c/c_prepro_macroFunc
메크로 종류: https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=sharonichoya&logNo=220506521054

3. 파일 병합
- 일반적인 프로그램은 여러 개의 소스와 헤더 파일로 이루어져 있다. 
- 컴파일러는 이를 따로 컴파일해 합치기도 하지만, 어떠한 경우는 전처리 단계에서 
  파일을 합치고 컴파일하기도 한다.

 - 리눅스 gcc 패키지를 이용하여 -E 옵션을 활용하여 소스 코드의 전처리 결과 확인
 $ gcc -E add.c > add.i		<- 전처리 파일 생성
 $ cat add.i			<- 전치리 파일 확인




<컴파일>

- 컴파일(Compile)은 C로 작성된 소스 코드를 어셈블리어로 번역하는 것이다. 
- 이 과정에서 컴파일러는 소스 코드의 문법을 검사하는데, 
  코드에 문법적 오류가 있다면 컴파일을 멈추고 에러를 출력한다.



