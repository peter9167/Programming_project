리버싱이란?

Reverse : 역, 반대의
Engineering : 공학.

말 그대로 역공학을 뜻한다.

리버싱은,

- 이미 존재하고 작동하는 프로그램, 즉, 기계어로 번역된 프로그램의 구조와,
  실제 프로세스로서 작동하는 동작을 파악함으로서, 해당 프로그램의 구조를 파악하는 기술을 말한다.
(프로그램의 해부학이라고 생각해도 된다.)

어떻게 보면 컴파일러의 반대되는 일로 이해할수도 있다.

컴파일러가, 사람이 이해하기 좋은 코드를 번역하여 기계어로 뽑아내는 일을 한다면,(링커나 어셈블러의 개념을 합쳐서 그냥 컴파일러라고 부르겠다.)

리버싱의 경우는, 그러한 0과 1의 디지털 조합인 프로그램을 다시 사람이 이해하기 쉽도록 되돌리는 역할을 한다.

일단 이러한 일을 왜 하느냐 하면,

1. 학습용 : 조금 과하다 싶은 용도지만, 일단 돌아가는 프로그램을 리버싱으로 해석할수 있고, 해석 해본다면, 어떤 면에서 직접 코드를 짜보는 것보다 경험치가 엄청나게 늘어날 것이다.(리버싱 하려면 컴퓨터 동작부터 프로그램 실행 원리까지 완전히 파악하고 있어야 하기에, 초보자용 학습은 아니라고 생각한다. IT업계의 신선이 되고 싶다면 추천한다.)


2. 디버깅 : 이상하게 자원 사용량이 높거나, 오동작을 하는 프로그램을 리버싱 함으로서, 코드 개선에 도움을 줄수 있다.(허나, 이 경우는 리버싱까지 가지 않더라도 개발자 본인으로서는 디버깅만으로 해결할수 있으니...)


3. 해킹 : 어쩌면 가장 주가 되는 방식이 아닐까 싶다. 윈도우 응용프로그램을 예로들면, 이미 완성된 하나의 프로그램을 외부에서 관찰하고 분석함으로써, 해당 프로그램의 동작을 외부에서 조절할수 있게 되는 것이다.(예를들면 어느 정보를 어느 메모리 공간에서 사용한다는 정보를 알게되면 해당 부분의 수치를 변화시켜 프로그램 내부 동작을 제어 가능한 것이다. 반대로, 해당 공간에 있는 정보를 알아내는 것 자체가 중요할수도 있고...)


4. 보안 : 해킹과 보안은 동전의 양면이라 했던가...

확실한 것은, 리버싱을 잘하는 사람은, 프로그램의 동작과 컴퓨터 구조에 대해 한 경지에 오른 사람이란 것이다.